*소스코드 
1.전역 코드 : 전역 스코프 생성. var변수, 함수 선언문으로 선언된 전역함수 관리
            전역 코드 평가시 전역 실행 컨텍스트 생성
2. 함수코드 : 지역 스코프 생성. 지역변수, 매개변수, arguments 관리.
            지역스코프를 전역스코프에서 시작하는 스코프 체인으로 연결
            함수 코드 평가시 함수 실행 컨텍스트 생성
3. eval 코드 : strict mode에서 독자적인 스코프 생성.
            eval 실행 컨텍스트 생성
4. 모듈 코드 : 모듈별로 독자적인 모듈 스코프 생성. 모듈코드 평가시
            모듈 실행 컨텍스트 생성

*소스코드 평가와 실행
1. 소스코드 평가 : 실행 컨텍스트를 생성하고 선언문을 실행해 스코프에 등록
2. 소스코드 실행 : 런타임이 시작.소스코드 실행에 필요한 정보를 실행 컨텍스트가 관리하는 스코프에서 검색해 취득
                소스코드 실행 결과는 다시 실행 컨텍스트가 관리하는 스코프에 등록됨

*실행컨텍스트의 역할
1. 선언에 의해 생성된 모든 식별자를 스코프를 구분해 등록후 상태 변화를 관리
2. 스코프 체인 형성. 이를 통해 식별자를 하위에서 상위까지 검색 가능
3. 현재 실행 중인 실행 순서를 변경함. 되돌아갈 수도 있다.

*실행컨텍스트 스택 : 코드 실행 순서 관리
전역 실행 컨텍스트 => 함수 실행 컨텍스트 => 내부 함수실행 컨텍스트 => 함수 실행 컨텍스트 => 전역 실행 컨텍스트

*렉시컬 환경 
식별자와 바인딩된 값, 상위 스코프에 대한 참조를 기록하는 저장소
스코프와 식별자를 관리하는 실행 컨텍스트의 한 부분

*렉시컬 환경은 
1.환경 레코드(값 저장소)
2. 외부 렉시컬 환경에 대한 참조(상위 스코프)

*실행컨텍스트의 생성과 과정

<전역 코드 실행>
1. 전역 객체 생성 : 전역 코드 평가 이전
2. 전역 코드 평가 


    1. 전역 실행 컨텍스트 생성
    2. 전역 렉시컬 환경 생성 : 실행 컨텍스트에 바인딩
        전역 환경레코드 생성(객체 환경 레코드, 선언적 환경 레코드 ... 포함)

    3. this바인딩 
    : 전역 환경 레코드와 함수 환경 레코드에만 존재. 
    : 전역 렉시컬 환경의 외부 렉시컬 환경에 대한 참조는 null.(종점이라)
    4. 외부 렉시컬 환경 참조 결정

<함수 코드 실행> --- foo 함수 실행 컨텍스트는 실행 컨텍스트의 최상위에 올라옴(실행중)
    1. 함수 실행 컨텍스트 생성
    2. 함수 렉시컬 환경 생성: 실행 컨텍스트에 바인딩
        함수 환경레코드 생성 : 매개변수, arguments, 지역변수, 중첩함수 등록 관리
    3. this바인딩
    4. 외부 렉시컬 환경 참조 결정 (상위 스코프)


    자바스크립트는 함수를 어디에 정의했는가에 따라 상위 스코프를 결정
    상위 스코프를 기억함

    함수 실행 컨텍스트가 소멸되었다 하더라도 그 함수 렉시컬 환경을 누군가 참조하고 있다면,
    함수 렉시컬 환경은 소멸되지 않는다. (클로저 연관)

블록 레벨 스코프(let, const)
    모든 코드 블록(if, for, while, try/catch..)모든 {}을 지역 스코프로 인정함..
    