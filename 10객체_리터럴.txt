원시 타입의 값은 변경 불가능한 언어이나, 객체 타입의 값은 변경이 가능함.
객체는 0개이상의 프로퍼티로 구성된 집합이며, 프로퍼티는 키와 값으로 구성된다. 
함수는 일급 객체이기에 프로퍼티로 사용될 수  있는데, 이 함수를 메소드라고 부른다.
* 프로퍼티 : 객체의 상태를 나타내는 값
* 메서드 : 프로퍼티를 참조하고 조작할 수 있는 동작

프로퍼티는 쉼표(,)로 구분한다. 
let person = {
    name : 'oh',    //프로퍼티 키는 name, 프로퍼티 값은 'oh'
    age : 25,       //프로퍼티 키는 age, 프로퍼티 값은 25
}
프로퍼티는 프로퍼티 키와 값으로 구성된다.
프로퍼티 키는 프로퍼티 값에 접근할 수 있는 이름으로서 식별자 역할을 한다.
프로퍼티 키의 이름을 지을 때에는 식별자 네이밍 규칙에 따르는 것이 좋다(firstName)

프로퍼티 키에 문자열이나 심벌값 이외의 값을 사용하면, 암묵적 타입 변환을 통해 문자열로 변한다
특히, 숫자로 입력하면 ""는 붙지 않지만 내부적으로는 문자열로 변한다.

이미 존재하는 프로퍼티 키를 중복 선언하면 나중에 선언한 프로퍼티 키로 덮어쓴다.
이때 에러가 발생하지 않는다.

<프로퍼티 접근하는 법>
1. .(마침표) 표기법
2. [](대괄호) 표기법

let person = {
    name : 'jenny'
}
console.log(person.name) //마침표 표기법
console.log(person['name']) //대괄호 표기법

대괄호 표기법을 사용할 때, 대괄호 프로퍼티 접근 연산자 내부에 지정하는 프로퍼티 키는 반드시
따옴표로 감싼 문자열이여야 한다.
console.log(person[name]) //error: name is not defined

객체에 존재하지 않는 프로퍼티에 접근하면 undefined를 반환한다.
프로퍼티 키가 숫자로 이루어진 문자열의 경우 ''를 생략할 수 있다.
person.1;
person[1];

<프로퍼티 값 갱신>
이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신된다.



