함수의 매개변수는 함수 몸체 내에만 참조할 수  있고 함수 몸체 외부에서는 참조할 수 없다
-> 매개변수의 스코프가 함수 몸체 내부로 한정되어 있기 때문이다.

function add(x,y){
    console.log(x,y);
    return x+y;
}
console.log(x,y) //x is not defined

스코프 내에서 식별자는 유일해야 하나, 다른 스코프에서는 동일한 식별자를 사용할 수 있다.
한 스코프 내에서만 겹치지 않으면 된다.
!var는 가능하지지만, let,const는 한 스코프내에서 중복된 선언을 할 수 없으므로,
이렇게 알아두는 것이 좋다.

<지역 스코프>
지역 변수는 자신의 지역 스코프와 하위 지역 스코프에서 유효하다.
전역에서 지역 변수를 참조하려고 하면 에러가 발생한다. 
반대로 내부에서는 외부의 전역 변수를 참조할 수 있다. 
지역/전역에서 
중복된 식별자가 있을 경우, 당연히 내부에서는 지역 변수를 참조한다.
 
 <검색>
 변수를 참조할 때 js엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여
 상위 스코프 방향을 이동하며 선언된 변수를 검색한다. 이를 스코프 체인이라고 한다.

 <스코프 체인 : 변수 검색>
 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만, 역은 성립하지
 않는다.

 <블록 레벨 스코프>
 let, const는 함수 몸체 뿐만 아니라 모든 코드 블록 (if, while, for...)
 이 지역 스코프를 만드는 블록 레벨 스코프를 사용한다. 이는 함수 레벨 스코프를 지원하는 
 var과의 차이점이며, let,const 사용을 권장하는 이유이다. 

 <렉시컬 스코프>
 js는 렉시컬 스코프를 함수를 어디서 정의했는지에 따라 정적으로 결정한다. 함수가 호출된
 위치는 상위 스코프 결정에 어떠한 영향도 미치지 않는다.
 **함수의 상위 스코프는 언제나 자신이 정의된 스코프이다.

 



 
  

