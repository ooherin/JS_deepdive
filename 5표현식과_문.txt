<표현식과 문>
변수에 할당되는 것은 값이다. 
값을 생성하는 가장 기본적인 방법은 리터럴을 사용하는 것이다. 
리터럴은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법을 말한다. 
(정수리터럴, 문자열 리터럴, null 리터럴 등...)

표현식은 문장처럼 동작할 수 있다. 그러나 문장은 표현식처럼 동작할 수 없다. 
<표현식>
표현식은 값을 만들어낸다. 표현식은 값 하나로 귀결괴는 코드 조각이다.
표현식이 평가되면 새로운 값을 생성하거나 기존값을 참조한다. 
표현식은 다른 표현식의 일부가 되어 새로운 값을 만들어 낼수 있다. 

리터럴도 표현식이다. var score = 100;
표현식의 예: 리터럴, 식별자, 연산자, 함수 호출...

표현식은 코드 중 값이 들어가는 곳이면 어디에나 들어갈 수 있다. 
표현식은 반드시 상태를 바꿀 필요가 없다. (함수 호출도 표현식이다. 함수를 호출하면 상태가 바뀌는 경우가 있는데, 꼭 그런 것은 아니다. )

<문장>
문장은 기본적으로 무언가를 수행한다. (문장은 보통 수단이 아닌 목적이 된다..?)
문은 프로그램을 구성하는 기본 단위이자 최소 실행 단위이다. 
세미콜론을 붙이는 게 원칙(안붙여도 자동으로 붙여줌)
문장은 값이 들어갈 곳에 들어갈 수 없다. 그래서 함수의 인자로, 대입연산의 값, 피연산자로 사용 불가
문장의 예 : 반복문(for, while) 조건문(if, switch), 함수 선언식, 변수 선언문, 할당문.

세미콜론은 문의 종료를 나타낸다(명령 끝!)
{} 코드 블록 뒤에는 세미콜론을 붙이지 않는다.

<표현식인 문과 표현식이 아닌 문>
표현식은 문이 될수도 있고 안될 수도 있다. 
변수 선언문(문)은 표현식이 아니다 --> 값으로 평가 불가
x = 1 + 2;(x는 선언됨) --> 표현식이면서 완전한 문이다. 

구별하는 방법: 변수에 할당해 본다 (값이므로) 
let a = x = 1 + 2 (표현식인 문)
변수에 할당 가능하면 그 문은 표현식이 된다. (x = 100;)
변수에 할당할 수 없으면 그 문은 표현식이 될 수 없다. (변수 선언문 var a;)

<완료값>
표현식이 아닌 문을 실행하면 언제나 undefined를 반환한다.(반환할 값이 없음 )
표현식인 문을 실행하면 언제나 평가된 값을 반환한다. 

