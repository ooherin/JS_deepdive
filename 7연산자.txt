1. 산술 연산자 
(1)이항 산술 연산자(+,-,*,/,%)
    피연산자의 값을 변경하는 부수 효과가 없다. 언제나 새로운 값을 만들 뿐이다.

(2)단항 산술 연산자
  ++ : 값이 1증가
  let a = 1;
  a++;
  console.log(a); //2

  -- : 값이 1감소

  + : 영향x
  - : 음수가 됨

(3) 전위 연산자

   a++ => 연산 후에 값을 더해라
   ++a => 연산 전에 값을 더해라 ---다음 연산때 +된 값을 적용시킴. 다음 단계에서 콘솔을 찍으면 변환된 값이 나옴.
   
   let x = 5;
   result = x++;
   console.log(result); //5
   console.log(x); //6

<플러스 연산자의 기능>
  1) 숫자 타입이 아닌 피연산자에 +를 사용하면 피연산자를 숫자 타입으로 변환하여 반환한다.
  이때 피연산자를 직접 바꾸지 않고 새로운 숫자 값을 생성해 반환한다.
  2) 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작한다. 
  ex) '1' + 2 = '12'
      1 + null = 1; (null은 0으로 변환된다. 더하는 게 숫자이므로 )

(4) 할당 연산자

    변수 = 값

    = : 왼쪽 변수에 오른쪽 값들 할당
    += : 왼쪽변수에 오른쪽 값이 더해짐. 누적값을 구할 때 사용
    (숫자 뿐만 아니라 문자열을 더할 때에도 많이 쓰인다. )
    ex) a += 5;
        a = a + 5;
    ex) let str = '안';
        str += '녕';
        console.log(str); //'안녕'

(5)비교 연산자
    == 동등 비교 ----> 값만 같으면 true. type이 같은지는 판별하지 않음.
                    input에서 받아온 값은 string이므로 number와 같은지 판별할 때.... 
                    근데 별로 안 씀. 
    === 일치 비교 ---->값과 type이 같은지 판별해서 같으면 true. (찐트루) 왠만하면 이거 써야함.
                    0 === '0'
    != 부등 비교 -----> 두 피연산자의 자료형을 일치시킨 후, 비교를 수행함. 즉 타입 상관없이 값만 다르면 true.
     (달라?)         값이 다르면 false.
                    5 != '5' false: 둘 다 값이 5로 같다.(자료형을 일치시킴.5로 두 값이 같다. )
                    5 != '3' true: 값이 다르다.(자료형을 일치시켜도 값이 서로 다르다.)
    !== 불일치 비교 ----> 값과 type이 하나라도 달라야 true.(부등 비교 포함)
                        5 !== 3 true
                        5 !== '5' true
                        5 !== '3' true
                        5 !== 5 false (이때만 false)

(6)삼항 조건 연산자(물음표 연산자)
    조건식? 조건식이 true일 때 값 : 조건식이 false일때 값
    let result = x % 2 === 0 ? '짝수' : '홀수'
 
    물음표 연산자는 if ~else 와 기능이 비슷하나, 물음표 연산자는 값처럼 사용할 수 있지만(변수 할당 가능)
    if ~else는 할당이 불가능한 문이다. 

(7) 논리 연산자
    || (or) (논리합) : 둘 중에 하나라도 true이면 true를 반환함.
    && (and) (논리곱) : 둘 다 true여야만 true를 반환함.
    ! (not) (부정) : 반환될 boolean값의 반대를 반환함.

    true || true => true
    true && false => false

    !(부정 연산자)는 언제나 불리언 값을 반환하나, 꼭 피연산자가 불리언 값을 필요없다. 이때는 
    암묵적 타입 변환이 이루어진다.
    !0 = true;
    !'hello' = false;

(8)쉼표 연산자
    var x, y, z
    x =1, y =2, z = 3 //3 : 마지막 피연산자의 결과를 반환한다. 

(9) 그룹 연산자 : (괄호안에 넣으면 우선순위 올라감)

(10) typeof 연산자 : type을 반환한다.
    typeof null  //object(주의)
    null인지 확인 할때는 typeof가 아니라 ===(null)을 활용하자.

(11) 지수 연산자(**) : 우선순위가 *보다 높다.
    ex) (-5) ** 2 = 25;

<부수효과가 있는 연산자>
= (할당 연산자), ++/==(증가, 감소 연산자), delete 연산자





    
 


