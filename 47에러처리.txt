 에러가 발생하지 않는 코드를 작성하는 것은 불가능하다. 따라서 에러는 언제든지 발생할 수 있다. 
try...catch문을 사용해 발생한 에러에 적절하게 대응하면 프로그램이 강제 종료되지 않고 계속해서 코드를 실행
시킬 수 있다. 

try{
  foo();
}catch(err){
  console.error('[에러발생]',err)
}

직접적으로 에러를 발생시키지 않는 에러 상황이 발생할 수도 있다. 
const $button = document.querySelector('button'); //null
$button.classList.add('disabled'); //typeError : cannot read property 'classList' of null

47.2 try...catch...finally 문
에러를 처리하는 두가지 방법
1. querySelector처럼 예외적인 상황이 발생하면 반환하는 값(null or -1)을 if문이나 단축 평가
또는 옵셔널 체이닝 연산자를 통해 확인하는 방법
2. try...catch...finally문 같ㅌ이 에러 처리 코드를 먼저 등록해 두고 에러가 발생하면 
에러 처리 코드로 점프하도록 하는 방법

try{
  //실행할 코드 (에러가 발생할 가능성이 있는 코드)
}catch(err){
  //try 코드 블록에서 에러가 발생하면 이 코드 블록의 코드가 실행된다. 
}finally{
  //에러 발생과 상관없이 반드시 한 번 실행된다. 
}

try코드 블록이 가장 먼저 실행되고, 여기서 에러가 발생하면 catch의 err에 담긴다. 
이 err는 catch 코드블록 내에서만 유효하다. finally 코드블록은 
에러 발생과 상관없이 반드시 한 번 실행된다. 

47.3
Error 객체
Error 생성자 함수는 에러 객체를 생성한다. Error 생성자 함수에는 에러를 상세히 설명하는 에러 메세지를 
인수로 전달할 수 있다. 

const error = new Error('invalid');

자바스크립트에서는 error 생성자 함수를 포함해 총 7개의 에러 객체를 생성할 수 있는 Error 생성자 
함수를 제공한다, 

1. Error : 일반적인 에러 객체
2. SyntaxError : 자바스크립트의 문법에 맞지 않은 문을 해석할 때 발생하는 에러
3. ReferenceError : 참조할 수 없는 식별자를 참조했을 때 발생하는 에러 
4. TypeError : 피연산자 또는 인수의 데이터 타입이 유효하지 않을 때 발생하는 에러
5. RangeError : 숫자값의 허용 범위를 벗어났을 때 발생하는 에러
6. URIError : encodeURI 또는 decodeURI 함수에 부적절한 인수를 전달했을 때 발생하는 에러
7. EvalError : eval 함수에서 발생하는 에러

47.4 throw 문
Error 생성자 함수로 에러 객체를 생성한다고 해도 에러가 발생하는 것은 아니다. 즉, 에러 객체 생성과
에러 발생은 의미가 다르다.

try{
  new Error('something wrong') //에러 객체를 생성한다고 에러가 발생하는 것은 아니다. 
}catch(err){
  console.log(err)
}

에러를 발생시키면 try 코드 블록 내에서 throw 문으로 에러 객체를 던져야 한다. 

try{
  throw new Error('something wrong)
  //에러 객체를 던지면 catch 코드 블록이 실행되기 시작한다. 
}catch(err){
  console.log(err)
}

예를 들어 repeat 함수를 구현한다고 할때 repeat함수는 두번쨰 인수로 반드시 콜백함수를 전달받아야 한다. 
만약 두번째 인수가 함수가 아니라면 TypeError를 발생시킨다.

const repeat = (n,f) => {
  if(typeof f !== 'funciton'){
    throw new TypeError('f must be a function');

    for(let i = 0 ; i < n ; i++){
      f(i); //i를 전달하면서 f를 호출함
    }
  }
}

try{
  repeat(2,1)  //두번째 인수가 함수가 아니므로 TypeError를 발생시킨다. 
}catch(err){
  console.log(err) //TypeError : f is not a function 
}

47.5 에러의 전파
에러는 호출자 방향으로 전파된다. 즉, 콜스택의 아래 방향으로 전파된다. 

const foo () => {
  throw Error('foo에서 발생한 에러')
}

const bar = () => {
  foo()
}

const baz = () => {
  bar();
}

try{
  baz()
}catch(err){
console.log(err)
}

위의 foo에서 발생한 에러는 bar, baz, 전역으로 에러가 전파된다. 이처럼 throw된 에러를  캐치하지 않으면 
호출자 방향으로 전파된더 이때 throw 된 에러를 캐치하여 적절히 대응하면 프로그램을 강제 종료 시키지 않고 실행
흐름을 복구할 수 있다. throw된 에러를 어디서도 캐치하지 않으면 프로그램은 강제 종료 된다. 

주의할 것은 비동기 함수인 setTimeout이나 프로미스 후속 처리 메소드의 콜백함수는 호출자가 없다는 것이다. 
setTimeout이나 프로미스 후속 처리 메서드의 콜백함수는 태스크 큐나 마이크로태스크 큐에 일시 저장
되었다가 콜 스택이 비면 이벤트 루프에 의해 콜 스택으로 푸시되어 실행된다. 
이때 콜 스택에 푸시된 콜백 함수의 실행 컨택스트는 콜 스택의 가장 하부에 존재하게 된더, 따라서 에러를 전파할 
호출자가 없다. 
