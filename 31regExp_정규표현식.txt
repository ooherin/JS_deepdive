regex
| 또는 (정규표현식에서는 귀찮아서 하나만 씀)
() 그룹, 그룹을 여러개 지정할 수 있음. 있으면 나오고 없으면 undefined
[] 문자셋, 괄호안의 어떠한 문자든 [a-zA-Z0-9] 
[^] 부정문자셋, 괄호안의 어떤 문자가 아닐때
(?:) 찾지만 기억하지 않음. 그룹으로 저장하지 않음

? 없거나 있거나
* 없거나 있거나 많거나
+ 하나 또는 많이 있나
{n} n번 반복
{min,} 최소
{min, max} 최소, 그리고 최대

\b 단어 경계 (문자 앞에다 붙임,이 문자로 시작하는 단어에서 이 문자를 찾음)
           (문자 뒤에다 붙임,이 문자로 끝나는 단어에서 이 문자를 찾음)
\B 단어 경계가 아님 (정규 표현식에서 대문자는 소문자의 반대임)
^ 문장의 시작 (단어 앞에다 붙임. 이 문자로 시작하는 문장에서 이 문자를 찾음)
$ 문장의 끝 (단어 끝에다 붙임. 이 문자로 시작하는 문장에서 이 문자를 찾음)

\ 특수문자인 경우 앞에 붙이는 것 \.이런거 찾을때 앞에다 붙이기
. 모든 글자(줄바꿈 문자 제외)
\d 숫자(digit)
\D 숫자 아님(digit x )
\w 문자(word)
\W 문자 아님(Word x )
\s 공백(space)
\S 공백아닙 (space x)

https://regexr.com/5mhou

전화번호 찾는 법 (연결문자는 ' ' 나 '-')
/\d{2,3}[- ]\d{3,4}[- ]\d{4}/gm
 000     -    0000  -   0000
이메일 찾는 법 
+는 앞에 문자가 여러개로 이루어짐.
[a-zA-Z0-9+-._]+\@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+
    aralrro     @   naver       .    com
유튜브 주소에서 맨뒤에 키만 찾기
?: 를 ()안의 앞에다 적으면 그 ()값은 무시함. 그룹으로 저장되지 않음.
(?:https?:\/\/)?(?:www\.)?youtu.be\/([a-zA-Z0-9-]{11})

const target = "Is this all there is?";
const regexp = /is/i; 
 [ i : 대문자 소문자를 구별하지 않음 ]
regexp.test(target); //true

플래그 : i => 대소문자를 구별하지 않고 검색한다. 
regexp의 text 메소드는 target문자열에 대해 정규표현식 regexp의 패턴을 검색해 매칭 
결과를 불리언 값으로 반환한다 

<regexp 메서드>
