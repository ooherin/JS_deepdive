명시적 타입 변환: 개발자의 의도에 따라 타입을 변화시키는 것
ex) x.toString()

암묵적 타입 변환: 개발자의 의도와 상관없이 타입이 변환되는 것
ex) let x = 10;
let str = x + '';
ß
console.log(typeof str) //string  
console.log(typeof x) //number
--> 원래 값의 타입은 변경하지 않았다. x는 원시값이므로 변경할 수 없다. 
--> 새로운 string타입의 값이 생성된 것이다. (재할당되지 x)
--> 이렇게 만들어진 값은 단 한번 사용되고 버려지게 된다(변수에 할당되지 않아서)

<암묵적 타입 변환>
'10' + 2 = '102'  : 하나라도 문자열이고 +로 연결하면 문자열로 합쳐진다
5 * '10' = 50 : 하나가 문자열이더라도 *를 쓰면 숫자로 자동 변환된다.

<문자열 타입으로 암묵적 타입 변환하는 경우>
0 + '' = '0'
NaN + '' = 'NaN'
true + '' = 'true'
null + '' = 'null'
undefined + '' = 'undefined'
(Symbol()) + '' = error
[] + '' = ""
[10,20] + '' = "10,20"
({}) + '' = "[object object]
--> 왠만한 것들은 ""안에 들어가 문자열이 된다.

<숫자 타입으로 암묵적 변환하는 경우>
1 - '1' = 0 
1 * '10' = 10
1 / 'one' = NaN
(주의 : 1 + '2' = '12')

'1' > 0 = true

+단항 연산자를 붙이면 숫자 타입의 값으로 암묵적 변환된다.
(=는 할당 연산자가 아닌 값을 보여주는 용도로 쓰였다. )
+'' = 0 
+'0' = 0
+'1' = 1
+'string' = NaN
+true = 1
+false = 0
+null = 0
+undefined = NaN
+Symbol() = error

<불리언 타입으로 변환되는 경우>
if('') --> false
if(true) --> true
if(0) --> false
if('str') --> true
if(null) --> false

false로 평가되는 값 : false / undefined/ null/ 0 / NaN / ''(빈문자열)
_________________________________________________
<명시적 타입 변환>

<문자열 타입으로 변환하는 법>
1. String 생성자 함수를 new연산자 없이 호출  ex) String(1); //'1'
2. object.prototype.toString 메서드를 이용 ex) (NaN).toString(); //'NaN'
3. 문자열 연결 연산자를 사용 ex) 1+''; //'1' ex)true + '' = 'true'

<숫자 타입으로 변환>
1. Number 생성자 함수를 new 연산자 없이 호출하는 방법
ex) Number('0') //0
2. parseInt, parseFloat함수를 사용하는 방법 (only문자열만 가능)
ex) parseInt('1') //1
3. + 단항 산술 연산자 사용
ex) +'0' //0
ex) +true //1
4. * 산술 연산자를 이용
ex) '0' * 1 //0
ex) true * 1 //1

<불리언 타입으로 변환>
1.Boolean 생성자 함수를 new 연산자 없이 호출한다.
ex) Boolean('x') //true
ex) Boolean('false') //true(빈문자열이 아니므로)
ex) Boolean(0) //false
ex) Boolean(null) //false
ex) Boolean(undefined) //false
ex) Boolean('') //false

ex) Boolean({}) //true
ex) Boolean([]) //true
-> 객체타입은 비어있어도 true값이 나온다. 

2. !부정 논리 연산자를 두번 사용한다(한번하면 반대로 나온다.)
ex) !!0 //false
ex) !!null //false
ex) !!{} //true

_________________________________________________
<단축 평가>
&&연산자와 ||연산자는 논리 연산의 결과를 결정하는 피연산자를 타입
변환하지 않고 그대로 반환한다. 이를 단축 평가라고 한다.
단축 평가는 표현식을 평가하는 도중 결과가 확정되면 나머지 평가과정을 
생략하는 것을 말한다.

true || anything : true
false || anything : anything
true && anything : anything
false && anything : false

'cat' || 'dog' : 'cat'
false || 'dog' : 'dog'
'cat' && 'dog' : 'dog'
false && 'dog' : false
'cat' && false : false

let done = true;
let message = '';
message = done && '완료';
console.log(message); //완료

let done = false;
let message = '';
message = done || '미완료';
console.log(message) //'미완료'

message = done? '완료' : '미완료'
_________________________________________________
<단축 평가 || && 활용법>

<프로퍼티 참조 에러 : null/undefined>
객체는 키와 프로퍼티의 집합이다. 만약 객체를 가리키기를 기대하는 변수의
값이 객체가 아니라 null,undefined인 경우에 객체의 프로퍼티를 참조하면 에러가
발생한다. 단축 평가를 사용하면 이를 방지할 수 있다.

ex) let ele = null;
let value = ele.value; //typeerror : null의 프로퍼티 값을 읽을 수 없다. 

ex) let ele = null;
let value = ele && ele.value //null
-> ele이 null,undefined일 경우 &&연산자에 의해 이미 false가 되버리기 때문에 
앞에 있는 ele이 반환되게 된다. 즉, null이 그대로 나온다.

<함수 매개변수에 기본값을 설정>
함수를 설정할 때 인수를 전달하지 않으면 undefined가 할당된다. 이때 단축평가를 이용해 
기본값을 설정하면 에러를 방지할 수 있다.
ex) function getStringLength(str){
    str = str || '';
    return str.length;
}
getStringLength(); //0 
-->원래라면 undefined가 나오는데, 기본값을 할당했기 때문에 undefined대신 0이 나왔다.

ex) function getStringLength(str = ''){
    return str.length;
}
--> 위 예제와 결과가 같다. 












