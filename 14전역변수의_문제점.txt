<지역 변수의 생성 주기>
지역 변수의 생명 주기는 함수의 생명 주기 와 일치한다. 함수가 호출되기 전까지 그 안의 지역 
변수는 생성되지 않으며, 함수가 종료하면 그 지역 변수 또한 소멸한다

일반적으로 함수가 종료하면 함수가 생성한 스코프ㄷ 소멸하나, 어떤 게 함수를 참조하고 
있다면 그 때까지 스코프는 생존하게 된다.(클로저)

<호이스팅과 스코프>
호이스팅은 전역이 아닌 스코프 단위로 동작한다.
호이스팅은 변수 선언이 마치 스코프의 선두로 올려진 것처럼 동작하는 js 고유의 특성이다.

<전역 변수의 생성 주기>
var키워드로 선언한 전역 변수의 생성주기는 전역 객체의 생명 주기와 같다.

<전역 변수의 문제점>
1. 암묵적 결합 : 전역 변수는 어디서나 유효하고, 어디서든 참조할 수 있다.
2. 긴 생명 주기 : 메모리를 오래 소비하고 오류 확률도 높다.
3. 스코프 체인 상에서 마지막에 있음: 변수 검색시 하위에서 상위로 가는데 전역 변수는 가장 
상위 스코프에 있으므로, 가장 마지막에 검색된다.
4. 네임스페이스 오염 : 동일한 이름의 중복 가능성

따라서 전역 변수를 꼭 사용해야 할 때를 제외하고는 생명 주기가 짧은 지역 변수를 
사용해야 한다.

<전역 변수 사용 억제법>
1. 즉시 실행 함수 사용
모든 코드를 즉시 실행함수로 감싸면 그 안의 변수는 지역 변수가 된다.
그러나 즉시 실행 함수는 재사용이 불가하니 유의하자.

2. 네임스페이스 객체
전역에 네임스페이스 역할을 할 객체를 추가하고 전역 변수처럼 사용할 변수를 프로퍼티로
추가한다. 
let nameSpace = {};
nameSpace.name = 'lee';
console.log(nameSpace.name);

3.모듈 패턴 : 클로저